
(deffacts initial
        (cell 1  )
        (cell 2  )
        (cell 3  )
        (cell 4  )
        (cell 5  )
        (cell 6  )
        (cell 7  )
        (cell 8  )
        (cell 9  )
        (game)
        (player)
        (show)
)
(defrule full (declare(salience 11))
        ?s<-(game)
        (not (exists (cell ?  )))
        =>
        (retract ?s)
        (assert (endgame Draw))
)
(defrule print_matrix (declare(salience 10))
        ?s<-(show)
        (cell 1 ?a)
        (cell 2 ?b)
        (cell 3 ?c)
        (cell 4 ?d)
        (cell 5 ?e)
        (cell 6 ?f)
        (cell 7 ?g)
        (cell 8 ?h)
        (cell 9 ?i)
        =>
        (retract ?s)
        (printout t ?a "|" ?b "|" ?c crlf "-+-+-" crlf ?d "|"?e "|"?f crlf "-+-+-" crlf ?g "|"?h "|"?i crlf)
)
(defrule check-1 (declare(salience 11))
        ?s<-(game)
        (cell 1 ?a)
        (cell 2 ?b)
        (cell 3 ?c)
        (test (eq ?a ?b ?c))
        (test (neq ?a  ))
        =>
        (retract ?s)
        (assert (endgame ?a))
)
(defrule check-2 (declare(salience 11))
        ?s<-(game)
        (cell 4 ?a)
        (cell 5 ?b)
        (cell 6 ?c)
        (test (eq ?a ?b ?c))
        (test (neq ?a  ))
        =>
        (retract ?s)
        (assert (endgame ?a))
)
(defrule check-3 (declare(salience 11))
        ?s<-(game)
        (cell 7 ?a)
        (cell 8 ?b)
        (cell 9 ?c)
        (test (eq ?a ?b ?c))
        (test (neq ?a  ))
        =>
        (retract ?s)
        (assert (endgame ?a))
)
(defrule check-4 (declare(salience 11))
        ?s<-(game)
        (cell 1 ?a)
        (cell 4 ?b)
        (cell 7 ?c)
        (test (eq ?a ?b ?c))
        (test (neq ?a  ))
        =>
        (retract ?s)
        (assert (endgame ?a))
)
(defrule check-5 (declare(salience 11))
        ?s<-(game)
        (cell 2 ?a)
        (cell 5 ?b)
        (cell 8 ?c)
        (test (eq ?a ?b ?c))
        (test (neq ?a  ))
        =>
        (retract ?s)
        (assert (endgame ?a))
)
(defrule check-6 (declare(salience 11))
        ?s<-(game)
        (cell 3 ?a)
        (cell 6 ?b)
        (cell 9 ?c)
        (test (eq ?a ?b ?c))
        (test (neq ?a  ))
        =>
        (retract ?s)
        (assert (endgame ?a))
)
(defrule check-7 (declare(salience 11))
        ?s<-(game)
        (cell 1 ?a)
        (cell 5 ?b)
        (cell 9 ?c)
        (test (eq ?a ?b ?c))
        (test (neq ?a  ))
        =>
        (retract ?s)
        (assert (endgame ?a))
)
(defrule check-8 (declare(salience 11))
        ?s<-(game)
        (cell 3 ?a)
        (cell 5 ?b)
        (cell 7 ?c)
        (test (eq ?a ?b ?c))
        (test (neq ?a  ))
        =>
        (retract ?s)
        (assert (endgame ?a))
)

(defrule player_move
        ?s<-(player)
        (game)
        =>
        (retract ?s)
        (printout t "x: Alegeti o pozitie neocupata" crlf)
        (bind ?move (read))
        (assert (miscare ?move x))
)
(defrule player_move2
        ?s<-(miscare ?move x)
        ?c<-(cell ?move  )
        (game)
        =>
        (retract ?s)
        (retract ?c)
        (assert (cell ?move x))
        (assert (other_player))
        (assert (show))
)
(defrule player_move_fail
        ?s<-(miscare ?move x)
        (not (exists (cell ?move  )))
        (game)
        =>
        (printout t "Input gresit" crlf)
        (retract ?s)
        (assert (player))
)
(defrule other_player_move
        ?s<-(other_player)
        (game)
        =>
        (retract ?s)
        (assert (miscare (random 1 9) o))
)
(defrule other_player_move2
        ?s<-(miscare ?move o)
        ?c<-(cell ?move  )
        (game)
        =>
        (retract ?s)
        (retract ?c)
        (printout t "Computerul a ales:" crlf)
        (assert (cell ?move o))
        (assert (player))
        (assert (show))
)

(defrule other_player_move_fail
        ?s<-(miscare ?move o)
        (not (exists (cell ?move  )))
        (game)
        =>
        (retract ?s)
        (assert (other_player))
)
(defrule show_draw
        ?s<- (endgame Draw)
        =>
        (retract ?s)
        (printout t "Remiza"crlf)
)
(defrule show_winner
        ?s<- (endgame ?a)
        =>
        (retract ?s)
        (printout t "Jucatorul '" ?a "' a castigat"crlf)
)